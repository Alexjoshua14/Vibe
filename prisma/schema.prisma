// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  accessToken  String?
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  error        String?
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String?           @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  posts              Post[]
  currentlyPlayingId String?
  currentlyPlaying   CurrentlyPlaying? @relation(fields: [currentlyPlayingId], references: [id])
  queueId            String?           @unique
  queue              Queue?            @relation(fields: [queueId], references: [id])
  suggestedId        String?           @unique
  suggested          Suggested?        @relation(fields: [suggestedId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  song      Song     @relation(fields: [songId], references: [id])
  songId    Int
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Song {
  id               Int                @id @default(autoincrement())
  name             String
  artists          Artist[]
  album            Album              @relation(fields: [albumId], references: [id])
  albumId          Int
  duration_ms      Int
  href             String
  uri              String
  type             String
  explicit         Boolean
  popularity       Int
  posts            Post[]
  currentlyPlaying CurrentlyPlaying[]
  queue            Queue[]
  suggested        Suggested[]

  @@unique([name, albumId])
}

model Artist {
  id     Int     @id @default(autoincrement())
  name   String
  href   String
  uri    String
  songs  Song[]
  albums Album[]
}

model Album {
  id      Int      @id @default(autoincrement())
  name    String
  href    String
  uri     String
  images  Image[]
  songs   Song[]
  artists Artist[]
}

model Image {
  id      Int    @id @default(autoincrement())
  url     String
  height  Int
  width   Int
  albumId Int
  album   Album  @relation(fields: [albumId], references: [id])
}

model CurrentlyPlaying {
  id          String   @id @default(cuid())
  userId      String   @unique
  songId      Int?
  song        Song?    @relation(fields: [songId], references: [id])
  members     User[]
  progress_ms Int      @default(0)
  is_playing  Boolean  @default(false)
  timestamp   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  queueId String @unique
  queue   Queue  @relation(fields: [queueId], references: [id])

  suggestedId String    @unique
  suggested   Suggested @relation(fields: [suggestedId], references: [id])
}

model Queue {
  id               String            @id @default(cuid())
  songs            Song[]
  currentlyPlaying CurrentlyPlaying? @relation()
  user             User?             @relation()
  updatedAt        DateTime          @default(now()) @updatedAt
}

model Suggested {
  id               String            @id @default(cuid())
  songs            Song[]
  currentlyPlaying CurrentlyPlaying? @relation()
  user             User?             @relation()
  updatedAt        DateTime          @default(now()) @updatedAt
}
